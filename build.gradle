import me.modmuss50.mpp.ReleaseType

buildscript {
//    repositories {
//        maven { url = 'https://maven.neoforged.net/releases' }
//        maven { url = 'https://maven.parchmentmc.org' }
//        mavenCentral()
//    }
    dependencies {
//        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
    }
}
plugins {
    id("java")
    id("eclipse")
    id("idea")
    id "me.modmuss50.mod-publish-plugin" version "0.5.1"
    id('net.neoforged.gradle') version '[6.0.13, 6.2)'
    id('maven-publish')
}
apply plugin: 'org.parchmentmc.librarian.forgegradle'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

version = "${mod_version}+mc${mc_version}"
group = "me.desht.modularrouters"
archivesBaseName = "${modid}"

ext.releaseTag = System.getenv('TAG') ?: ""
ext.isAlpha = ext.releaseTag.contains("alpha")
ext.isBeta = ext.releaseTag.contains("beta")

def semver = mod_version
def relType = ext.isAlpha ? "alpha" : (ext.isBeta ? "beta" : "release")

sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

minecraft {
    mappings channel: 'parchment', version: "${project.mappings_version}-${project.mc_version}"
    runs {
        client {
            workingDirectory file('run')
            property 'forge.logging.markers', 'SCAN,CONFIG'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            ideaModule "${project.name}.main"
            mods {
                modularrouters.sources((SourceSet[]) [sourceSets.main])
            }
        }
        server {
            workingDirectory file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.disableRefMap', 'true'
            ideaModule "${project.name}.main"
            mods {
                modularrouters.sources((SourceSet[]) [sourceSets.main])
            }
        }
        data {
            workingDirectory file('run')
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'
            property 'mixin.env.disableRefMap', 'true'
            ideaModule "${project.name}.main"
            mods {
                modularrouters.sources((SourceSet[]) [sourceSets.main])
            }
            args '--mod', 'modularrouters', '--all', '--output', file('src/generated/resources/'),
                    '--existing', sourceSets.main.resources.srcDirs[0]
            environment 'target', 'fmluserdevdata'
        }
    }
}

// All jar files from this folder will be added automatically as runtime mod dependencies
def extraModsDir = "extra-mods-${mc_version}"

repositories {
    flatDir {
        name "extra-mods"
        dir file(extraModsDir)
    }
    maven {
        name "K-4u Mod maven"
        url "https://modmaven.dev/"
        content {
            includeGroup "mcjty.theoneprobe"
        }
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        name = "Patchouli/JEI"
        url = "https://maven.blamejared.com/"
        content {
            includeGroup "vazkii.patchouli"
            includeGroup "mezz.jei"
        }
    }
}

dependencies {
    minecraft "net.neoforged:forge:${mc_version}-${forge_version}"

    implementation fg.deobf("mcjty.theoneprobe:theoneprobe:${top_version}") {
        exclude group: "net.minecraftforge", module: "forge"
    }

    implementation fg.deobf("curse.maven:jade-324717:${jade_curse_id}")

    // compile against the JEI API but do not include it at runtime
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")
    // at runtime, use the full JEI
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-common:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")

    // Locally sourced extra mods for runtime (i.e. testing) - thanks AE2 for this idea
    for (extraModJar in fileTree(dir: extraModsDir, include: '*.jar')) {
        def basename = extraModJar.name.substring(0, extraModJar.name.length() - ".jar".length())
        def versionSep = basename.lastIndexOf('-')
        assert versionSep != -1
        def artifactId = basename.substring(0, versionSep)
        def version = basename.substring(versionSep + 1)
        runtimeOnly fg.deobf("extra-mods:$artifactId:$version")
    }
}

def replaceResources = tasks.register("replaceResources", Copy) {
    it.outputs.upToDateWhen { false }
    //Copy it into the build dir
    it.from(sourceSets.main.resources) {
        include "META-INF/mods.toml"
        expand 'version': version, 'mc_version': mc_version, 'mc_version_range': mc_version_range, 'forge_version_range': forge_version_range
    }
    it.into "$buildDir/resources/main/"
}

processResources {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    exclude('META-INF/mods.toml')
    configure { finalizedBy(replaceResources) }
}

classes.configure {
    dependsOn(replaceResources)
}

jar {
    manifest.attributes([
            "Specification-Title": "Modular Routers",
            "Specification-Vendor": "desht",
            "Specification-Version": "38.0", // We are version 1 of the modlauncher specification
            "Implementation-Title": project.name,
            "Implementation-Version": "${project.version}",
            "Implementation-Vendor" :"desht",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ])
    finalizedBy('reobfJar')
}

def mavenVer = ext.releaseTag == "" ? "${version}-SNAPSHOT" : "${version}"
publishing {
    publications {
        mavenCommon(MavenPublication) {
            artifactId = rootProject.archivesBaseName
            from components.java
        }
    }
    repositories {
        mavenLocal()
    }
    if (System.getenv("MODMAVEN_USER") != null) {
        publications {
            maven(MavenPublication) {
                groupId = project.group
                artifactId = project.archivesBaseName
                version = mavenVer

                // ForgeGradle will generate wild dependency definitions, see https://github.com/MinecraftForge/ForgeGradle/issues/584
                // Since we don't actually depend on anything, just remove the entire node.
                pom.withXml {
                    asNode().remove(asNode().dependencies)
                }

                from components.java
            }
        }
        repositories {
            maven {
                name = "modmaven"
                credentials {
                    username System.getenv("MODMAVEN_USER")
                    password System.getenv("MODMAVEN_PASSWORD")
                }
                url = "https://modmaven.dev/artifactory/local-releases/"
            }
        }
    }
}

Closure<ReleaseType> getReleaseType = { type ->
    switch(type) {
        case "alpha": return ReleaseType.ALPHA
        case "beta": return ReleaseType.BETA
        default: return ReleaseType.STABLE
    }
}

publishMods {
    dryRun = providers.environmentVariable("CURSEFORGE_TOKEN").getOrNull() == null
    changelog = providers.environmentVariable("CHANGELOG").orElse("dryrun")
    version = mod_version
    type = getReleaseType(relType)
    file = jar.archiveFile
    displayName = "${mod_name} ${mod_version} MC-${mc_version}"
    modLoaders.add("forge")
    modLoaders.add("neoforge")

    curseforge {
        projectId = curse_project_id
        accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
        minecraftVersions.add(mc_version)
        projectSlug = "modular-routers"
        announcementTitle = "Download from Curseforge"
        optional {
            slug = "patchouli"
        }
    }

    modrinth {
        projectId = modrinth_project_id
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        minecraftVersions.add(mc_version)
        announcementTitle = "Download from Modrinth"
        requires {
            id = "nU0bVIaL"
        }
    }

    discord {
        webhookUrl = providers.environmentVariable("DISCORD_WEBHOOK").orElse("dryrun")
        content = changelog.map { "# # Version ${version} of of Modular Routers has been released! \n" + it}
//        setPlatforms(platforms.curseforge, platforms.modrinth)
    }
}

idea {
    module {
        for (String exclude in ['run', 'out', 'logs']) {
            excludeDirs += file(exclude)
        }
    }
}
